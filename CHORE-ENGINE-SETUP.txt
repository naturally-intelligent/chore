---
CHORE ENGINE v0.8 Beta
---
Naturally Intelligent - Godot Engine Game Framework
---

What does this engine do?

It's a basic framework for any kind of game.

You provide the game scenes (2D/3D/whatever)
and Chore provides a menu framework with libraries/audio/etc.
Chore considers your game to be a bunch of scenes it manages!

---
SHARED DIRECTORIES
---

Use by linking/copying into your project these directories:
- engine
- widgets

Example: ln -s /path/to/chore/engine /path/to/yourgame/.

"widgets" contains optional convenient components you can use or not.
Even though the Chore repo contains art, sound, etc, you should not link those, they are examples.

---
SETTINGS FILES + DIRECTORIES
---

You will also want to copy+edit these files:
- core/game.gd
- core/settings.gd
- core/dev.gd
You don't have to put them in 'core' directory, but you will need to have these three global variables for autoload. Don't worry too much if you have a conflict, Godot is clever enough to distinguish files with the same names (as you can see in the demo app, there is also a menu called "settings.gd").

You will want to manually create these directories (or equivalent):
- art
- menus
- scenes (or levels?)
- music
Name them anything you want, and let Chore know your directories in "settings.gd"

---
PROJECT SETTINGS
---

You will need to set in your Project Settings:
- main scene: launch.tscn (see next section)
- autoload globals (order is important):

engine/debug.gd / debug
engine/util.gd / util
engine/math.gd / math
your-copy/settings.gd / settings
your-copy/game.gd / game
your-copy/dev.gd / dev
engine/audio.tscn / audio
engine/root.tscn / root
engine/menus.gd / menus
engine/scenes.gd / scenes

---
MAIN SCENE - launch.tscn
---
It's recommended to start a "dummy" scene, that is used to launch into your game.
A sample is provided called "launch.tscn" with script "launch.gd"
Simply copy "launch.tscn" to your own directory and link/copy the "launch.gd" script.

Set that as your starting menu in Project Settings -> Application -> Run -> Main Scene
The reason for this is that it provides command line arguments and other dev features for quicker development. For example you can easily change to start in windowed/fullscreen or jump to a scene.
The Godot editor also auto-opens the main scene when you load your project.
It's better for everyone if your first scene is your own scene and not Chore's.

---
MENUS + SCENES
---
Internally, all scenes and menus are called scenes, but there is also a "menus" helper class that treats some scenes as menus.

- Menus = overlaid stack of many-visible scenes (first-in-last-out)
- Scenes = one-at-a-time-visible pool of scenes

Menus are displayed on top of scenes.

So for example you can have your game level, then add some menus on top and still see the game paused underneath.

- menus.show('your-menu') to add a menu to the root scene
- scenes.show('your-scene') to easily add a persistent level (just a menu) to root scene

See the demo app included for examples on how to use these.

---
TRANSITIONS
---
You may also use fade transitions without switching scenes, just call one and yield after.
For example if you are making a storybook scene and you want fades between panels.

---
BASE CLASS / DUCKING
---
There is a top-level class you can use for menus/scenes, but it isn't required.
You just add any Control or Node as a scene/menu.
This approach was chosen because it would be a chore to make all your scenes inherit from this.
Instead ducking is preferred:
- on_show(), on_hide(), on_pause(), on_resume(), notify_closing(), pass_data()
Add these methods to your scene/menu if you need special code during these moments.

---
CAVEATS
---
You need to be aware of any Canvas layers being higher than the root overlay canvas layer. You can change that in settings.gd
Since CanvasLayer doesn't have a visibility property, you can't manage those scenes as expected without using Godot 3.5 and up. As a workaround, you can add custom hide code in an on_hide() call (called by root in _remove_current_scene using ducking). 

---
FUTURE PLANS
---
Demo that doesn't look like a mess.
Deprecate some global names, such as "game", and put them into a "chore" object, so as not to conflict less with peoples projects, because you probably have a "game" class?
Rename util/math/debug/etc to chore_util/chore_math/etc to avoid potential conflicts?
Rename ducking calls to on_chore_show() etc?
Clean up code with more static typing, consolidate some settings.
Abstract scenes/menus into a single manager object so you can add as many managers as needed.

---
DEVELOPMENT MODE
---

Enable development mode with:
- create file dev.tmp "ex: touch dev.tmp" in your project root
- ensure 'dev.tmp' doesn't get included in your builds
- set "game.release = false"
- edit dev settings in "dev.gd"

General Hotkeys:
- ui_screenshot - F5
- ui_fullscreen - F11

Dev Mode Hotkets:
- ui_quit - Q (useful for exiting fast + gracefully)
- ui_hud - H (useful for taking screenshots)
- dev_autoscreenshot - A (useful for making GIFs)
- dev_console - ` (tilda)
- dev_pause - P
- dev_advance - \ Backslash
- dev_resume - Backspace
- dev_slow - [
- dev_fast - ]
- ui_zoom_in - = (plus)
- ui_zoom_out - - (minus)

Recommended Dev Hotkeys to Add:
- ui_screenshot - S
- ui_fullscreen - F

You'll need to add your own keys to your project's Input Map to use these.

The console currently doesn't support typing, but it can be printed to.

---
GODOT GAMES USING CHORE ENGINE
---
Dirty Land - www.dirtylandgame.com
Forehead Chip - www.foreheadchip.com
[ more to be announced ]


